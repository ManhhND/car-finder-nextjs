import { userRegister } from "@/app/api";
import Login from "@/app/login/page";
import Register from "@/app/register/page";
import "@testing-library/jest-dom";
import { fireEvent, render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { redirect } from "next/navigation";

jest.mock("next/navigation", () => ({
  useRouter() {
    return {
      push: jest.fn(),
      refresh: () => jest.fn(),
    };
  },
}));

describe("Login page", () => {
  beforeEach(() => {
    global.fetch = jest.fn(() =>
      Promise.resolve({
        json: () => Promise.resolve({}),
      }),
    ) as jest.Mock;
  });
  it("should have Login text", () => {
    render(<Login />);
    const myElem = screen.getByText("Log in");
    expect(myElem).toBeInTheDocument();
  });

  it("should have username and password input fields", () => {
    render(<Login />);
    const usernameInput = screen.getByPlaceholderText("Username");
    const passwordInput = screen.getByPlaceholderText("Password");
    expect(usernameInput).toBeInTheDocument();
    expect(passwordInput).toBeInTheDocument();
  });

  it("should have a login button", () => {
    render(<Login />);
    const loginBtn = screen.getByTitle("Login");
    expect(loginBtn).toBeInTheDocument();
  });

  it("should login successful", async () => {
    render(<Register />);
    const usernameInput = screen.getByPlaceholderText("Username");
    const passwordInput = screen.getByPlaceholderText("Password");
    const emailInput = screen.getByPlaceholderText(/email/i);
    const registerBtn = screen.getByTitle("Login");
    await userEvent.type(usernameInput, "aem2");
    await userEvent.type(passwordInput, "123");
    await userEvent.type(emailInput, "user@email.com");
    fireEvent.click(registerBtn);
    waitFor(async () => {
      const res = await userRegister({
        username: "user",
        password: "123",
        email: "user@email.com",
      });
      expect(registerBtn).toBeDisabled();
      expect(res.message).not.toBeTruthy();
      expect(redirect).toHaveBeenCalledWith("/");
    });
  });

  it("should login failed", async () => {
    render(<Register />);
    const usernameInput = screen.getByPlaceholderText("Username");
    const passwordInput = screen.getByPlaceholderText("Password");
    const emailInput = screen.getByPlaceholderText(/email/i);
    const registerBtn = screen.getByTitle("Login");
    await userEvent.type(usernameInput, "aem2");
    await userEvent.type(passwordInput, "123");
    await userEvent.type(emailInput, "aem2@email.com");
    fireEvent.click(registerBtn);
    waitFor(async () => {
      const res = await userRegister({
        username: "aem2",
        password: "123",
        email: "aem2@email.com",
      });
      expect(res.message).toBeTruthy();
      expect(screen.getByText(/sorry/i)).toBeInTheDocument();
    });
  });
});
